#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build Openwrt Netgear WNDR4700 v21.02.3

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/openwrt/openwrt.git
  REPO_BRANCH: v21.02.3
  CONFIG_FILE: netgear_wndr4700-v21.02.3.config
  PATCH_FILES: netgear_wndr4700
  PATCH_DTS: 21.02.3__dts__netgear-wndr4700.dts
  PATCH_NAND: 21.02.3__image__nand.mk
  FEEDS_CONF: feeds.conf.default
  DIY_FEEDS: diy-feeds.sh
  DIY_BASE_FILES: diy-base-files.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: false
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghcs
        sudo apt update
        sudo apt -y install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget jq
        #sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        echo git clone $REPO_URL --depth 1 -b $REPO_BRANCH openwrt
        git clone $REPO_URL --depth 1 -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && cp $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_FEEDS
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_FEEDS

    - name: Update and install feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -f ./conf/$CONFIG_FILE ] && cp ./conf/$CONFIG_FILE openwrt/.config

    - name: Download package
      id: package
      run: |
        cd openwrt
        export FORCE_UNSAFE_CONFIGURE=1
        make defconfig
        make download -j8
        #find dl -size -1024c -exec ls -l {} \;
        #find dl -size -1024c -exec rm -f {} \;

    - name: Patch DTS NAND FILES
      run: |
        [ -f ./patch/$PATCH_DTS ] && cp ./patch/$PATCH_DTS openwrt/target/linux/apm821xx/dts/netgear-wndr4700.dts
        [ -f ./patch/$PATCH_NAND ] && cp ./patch/$PATCH_NAND openwrt/target/linux/apm821xx/image/nand.mk

    - name: Custom Base Files
      run: |
        [ -d ./files/$PATCH_FILES ] && cp -r ./files/$PATCH_FILES/* openwrt/target/linux/apm821xx/base-files/
        chmod +x $DIY_BASE_FILES
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_BASE_FILES

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        export FORCE_UNSAFE_CONFIGURE=1
        make -j$(nproc) || make -j1 || make -j1 V=s
        #make -j $(($(nproc)+1)) || make -j1 || make -j1 V=s
        #echo "::set-output name=status::success"
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: |
        df -hT
        ls -l openwrt/bin/targets/apm821xx/nand/
        du openwrt/bin/packages/powerpc_464fp/

    - name: Upload bin directory
      uses: actions/upload-artifact@v4
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin/ #openwrt/bin/targets/apm821xx/nand/	#openwrt/bin/packages/powerpc_464fp/
        if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        #echo "::set-output name=status::success"
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@v4
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        #echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "ðŸ”— [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "ðŸ”— [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        #echo "::set-output name=status::success"
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

